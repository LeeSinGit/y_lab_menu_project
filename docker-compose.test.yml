version: '3.9'


services:
  api:
    build: .
    container_name: api
    command: >
      sh -c "
      python -m alembic upgrade head
      && python -m uvicorn main:app --host 0.0.0.0 --port 8000"

    volumes:
      - .:/app
    ports:
      - '8000:8000'
    networks:
      - menu_networks
    depends_on:
      db:
        condition: service_healthy


  db:
    image: postgres:15.1-alpine
    container_name: db_postgres
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASS}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - db_data:/var/lib/postgresql/data
      - /var/lib/postgresql/data
    ports:
      - '5432:5432'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d $${POSTGRES_DB} -U $${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - menu_networks


  pytest:
    build: .
    container_name: pytest
    command: sh -c "cd /app && export PYTHONPATH=/app && python -m pytest -vv"
    volumes:
      - .:/app
    networks:
      - menu_networks
    depends_on:
      db:
        condition: service_healthy


  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - menu_networks


  rabbitmq:
    image: rabbitmq:3.12.2-management-alpine
    container_name: rabbitmq

    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASS}
      RABBITMQ_HEALTH_CHECK_USER: ${RABBITMQ_USER}
      RABBITMQ_HEALTH_CHECK_PASSWORD: ${RABBITMQ_PASS}

    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 20s

    ports:
      - 15672:15672
      - 5672:5672

    networks:
      - menu_networks


  celery:
    build: .
    env_file:
      - .env
    command: celery -A api.celery.celery worker --beat --loglevel=info
    networks:
      - menu_networks
    depends_on:
      - rabbitmq
      - api
    volumes:
      - ./api/celery:/app/api/celery


networks:
  menu_networks:
    name: menu_networks


volumes:
  db_data:
    name: db_data
